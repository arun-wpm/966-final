// why globalStore?
// Syntax error: You tried to assign to a field of cardprobs, but you can only assign to fields of globalStore
// so https://webppl.readthedocs.io/en/master/globalstore.html

// deck of cards = numbers + their probabilities
// 10, J, Q, K count as 10
// A counts as 11 (for now)
var initCards = function() {
  globalStore.cardnums = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
  globalStore.cardprobs = [1/13, 1/13, 1/13, 1/13, 1/13, 1/13, 1/13, 1/13, 4/13, 1/13]
}
initCards()
var allcards = Categorical({vs: globalStore.cardnums, ps: globalStore.cardprobs})

// a function that returns a function that gives new probabilities given card number
var pullOutCard = function(pullOutNum) {
  return function(num, prob) {
    return (num == pullOutNum && prob > 0) ? prob - 1/52 : prob
  }
}

// dealer draws two cards
var getTwoCards = function() {
    var draw1 = sample(Categorical({vs: globalStore.cardnums, ps: globalStore.cardprobs}))
    // take the first card out of the pile
    globalStore.cardprobs = map2(pullOutCard(draw1), globalStore.cardnums, globalStore.cardprobs)
    var draw2 = sample(Categorical({vs: globalStore.cardnums, ps: globalStore.cardprobs}))
    // take the second card out of the pile
    globalStore.cardprobs = map2(pullOutCard(draw2), globalStore.cardnums, globalStore.cardprobs)
    return [draw1, draw2]
}

// generate a sequence of at most n draws
var generateFrom = function(sequenceSoFar, strategy) {
  // player's priors determine probability of draw
  var pDraw = strategy(sequenceSoFar)
  var doDraw = flip(pDraw)
  if (!doDraw) {
    // stop drawing
    return sequenceSoFar
  }
  else {
    // take a card out of the pile
    var draw = sample(Categorical({vs: globalStore.cardnums, ps: globalStore.cardprobs}))
    globalStore.cardprobs = map2(pullOutCard(draw), globalStore.cardnums, globalStore.cardprobs)

    // add it to the sequence
    var sequence = sequenceSoFar.concat(draw)

    // game's stop and recursion conditions
    if(score(sequence) > 21) {
      return sequence
    } else {
      return generateFrom(sequence, strategy)
    }
  }
}

var score = function(sequence) {
  var sumSeq = sum(sequence)
  if (sumSeq > 21) {
    return reduce(function(x, acc) { return (x == 11) ? acc + 1 : acc + x }, 0, sequence)
  }
  else {
    return sumSeq
  }
}

/**
 * STRATEGIES: functions that determine probability of draw given sequence so far
 */
var drawTwoStrategy = function(sequence) {
  // just draw until i have two cards
  return (sequence.length < 2) ? 1 : 0
}

var drawThreeStrategy = function(sequence) {
  // just draw until i have three cards
  return (sequence.length < 3) ? 1 : 0
}

var lengthStrategy = function(sequence) {
  // less likely to draw the more cards i have
  return 1 / (sequence.length + 1)
}

var sumStrategy = function(sequence) {
  // less likely to draw the closer i am to 21
  return (score(sequence) < 21) ? 1 - score(sequence) / 21 : 0
}

var hardSeventeenStrategy = function(sequence) {
  // stop hitting after sum gets to 17 or more
  return (score(sequence) < 17) ? 1 : 0
}

var softSeventeenStrategy = function(sequence) {
  var softScore = reduce(function(x, acc) { return (x == 11) ? acc + 1 : acc + x }, 0, sequence)
  return (score(sequence) < 17 || (score(sequence) == 17 && softScore < 17)) ? 1 : 0
}

var thresholdStrategy = function(threshold) {
  return function(sequence) {
    return (score(sequence) < threshold) ? 1 : 0
  }
}

var softThresholdStrategy = function(threshold) {
  return function(sequence) {
    var softScore = reduce(function(x, acc) { return (x == 11) ? acc + 1 : acc + x }, 0, sequence)
    return (score(sequence) < threshold || (score(sequence) == threshold && softScore < threshold)) ? 1 : 0
  }
}

/**
 * GAMEPLAY
 */
initCards()
var dealerSequence = getTwoCards()
print("Dealer: " + dealerSequence)

var playerSequence = getTwoCards()
var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
print("Sequence: " + playerEndSequence)

var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
print("Dealer: " + dealerEndSequence)

var playerScore = score(playerEndSequence)
var dealerScore = score(dealerEndSequence)
print("Score: " + playerScore + " vs. " + dealerScore)

var win = function(playerEndSequence, dealerEndSequence) {
  return (
    score(playerEndSequence) <= 21 && // player doesn't bust
    (
      score(playerEndSequence) > score(dealerEndSequence) || // player's score is higher
      score(dealerEndSequence) > 21 // dealer busts
    )
  ) ? 'Win' : 'Not win'
}
print("Win: " + win(playerEndSequence, dealerEndSequence))

/**
 * MODELS
 */
// diferent hand configurations
// if the player were to hits
var model = function() {
  initCards()
  var dealerSequence = [3,8]
  var playerSequence = [11, 5]
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [2,10]
  var playerSequence = [11, 6]
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [4,9]
  var playerSequence = [11, 7]
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [3,8]
  var playerSequence = [9, 3]
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [2,10]
  var playerSequence = [5, 10]
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [4,9]
  var playerSequence = [8, 9]
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

// if the player were to stand
var model = function() {
  initCards()
  var dealerSequence = [3,8]
  var playerSequence = [11, 5]
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [2,10]
  var playerSequence = [11, 6]
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [4,9]
  var playerSequence = [11, 7]
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [3,8]
  var playerSequence = [9, 3]
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [2,10]
  var playerSequence = [5, 10]
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = [4,9]
  var playerSequence = [8, 9]
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

// distribution of scores given win and three draws
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  score(playerEndSequence)
}
viz(Infer({method: 'forward', samples: 100000}, model))

// distribution of scores given win and never hitting (2 cards total)
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  score(playerEndSequence)
}
viz(Infer({method: 'forward', samples: 100000}, model))

// probability of winning given two draws
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

// distribution of winning and score given two draws
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, drawTwoStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  var playerScore = score(playerEndSequence)
  // lol just weird workaround for graph plotting
  winGame + (playerScore < 10 ? '0' + playerScore : playerScore)
}
viz(Infer({method: 'forward', samples: 100000}, model))

// probability of winning given three draws
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

// distribution of winning and sum of cards given three draws
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, drawThreeStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  var playerScore = score(playerEndSequence)
  // lol just weird workaround for graph plotting
  winGame + (playerScore < 10 ? '0' + playerScore : playerScore)
}
viz(Infer({method: 'forward', samples: 100000}, model))

// probability of winning given length strategy
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, lengthStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

// distribution of winning and sum of cards given length strategy
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, lengthStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  var playerScore = score(playerEndSequence)
  // lol just weird workaround for graph plotting
  winGame + (playerScore < 10 ? '0' + playerScore : playerScore)
}
viz(Infer({method: 'forward', samples: 100000}, model))

// probability of winning given sum strategy
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, sumStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

// distribution of winning and sum of cards given sum strategy
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, sumStrategy)
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  var playerScore = score(playerEndSequence)
  // lol just weird workaround for graph plotting
  winGame + (playerScore < 10 ? '0' + playerScore : playerScore)
}
viz(Infer({method: 'forward', samples: 100000}, model))

// probability of winning given threshold strategy at 17
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, thresholdStrategy(17))
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, thresholdStrategy(17))
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  var playerScore = score(playerEndSequence)
  playerScore
}
viz(Infer({method: 'forward', samples: 100000}, model))

// distribution of winning and sum of cards given threshold strategy at 17
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, thresholdStrategy(17))
  var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  var playerScore = score(playerEndSequence)
  // lol just weird workaround for graph plotting
  winGame + (playerScore < 10 ? '0' + playerScore : playerScore)
}
viz(Infer({method: 'forward', samples: 100000}, model))

// probability of winning given threshold strategy at 17 (dealer uses soft 17)
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, thresholdStrategy(17))
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  winGame
}
viz(Infer({method: 'forward', samples: 100000}, model))

// distribution of winning and sum of cards given threshold strategy at 17
var model = function() {
  initCards()
  var dealerSequence = getTwoCards()
  var playerSequence = getTwoCards()
  var playerEndSequence = generateFrom(playerSequence, thresholdStrategy(17))
  var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)
  
  var winGame = win(playerEndSequence, dealerEndSequence)
  var playerScore = score(playerEndSequence)
  // lol just weird workaround for graph plotting
  winGame + (playerScore < 10 ? '0' + playerScore : playerScore)
}
viz(Infer({method: 'forward', samples: 100000}, model))

// probability of winning given different thresholds (hard 17 dealer)
var model = function(threshold) {
  return function() {
    initCards()
    var dealerSequence = getTwoCards()
    var playerSequence = getTwoCards()
    var playerEndSequence = generateFrom(playerSequence, thresholdStrategy(threshold))
    var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)

    var winGame = win(playerEndSequence, dealerEndSequence)
    winGame
  }
}
print(Infer({method: 'forward', samples: 100000}, model(12)))
print(Infer({method: 'forward', samples: 100000}, model(13)))
print(Infer({method: 'forward', samples: 100000}, model(14)))
print(Infer({method: 'forward', samples: 100000}, model(15)))
print(Infer({method: 'forward', samples: 100000}, model(16)))
print(Infer({method: 'forward', samples: 100000}, model(17)))
print(Infer({method: 'forward', samples: 100000}, model(18)))
print(Infer({method: 'forward', samples: 100000}, model(19)))
print(Infer({method: 'forward', samples: 100000}, model(20)))
print(Infer({method: 'forward', samples: 100000}, model(21)))

// probability of winning given different thresholds (soft 17 dealer)
var model = function(threshold) {
  return function() {
    initCards()
    var dealerSequence = getTwoCards()
    var playerSequence = getTwoCards()
    var playerEndSequence = generateFrom(playerSequence, thresholdStrategy(threshold))
    var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)

    var winGame = win(playerEndSequence, dealerEndSequence)
    winGame
  }
}
print(Infer({method: 'forward', samples: 100000}, model(12)))
print(Infer({method: 'forward', samples: 100000}, model(13)))
print(Infer({method: 'forward', samples: 100000}, model(14)))
print(Infer({method: 'forward', samples: 100000}, model(15)))
print(Infer({method: 'forward', samples: 100000}, model(16)))
print(Infer({method: 'forward', samples: 100000}, model(17)))
print(Infer({method: 'forward', samples: 100000}, model(18)))
print(Infer({method: 'forward', samples: 100000}, model(19)))
print(Infer({method: 'forward', samples: 100000}, model(20)))
print(Infer({method: 'forward', samples: 100000}, model(21)))

// probability of winning given different soft thresholds (hard 17 dealer)
var model = function(threshold) {
  return function() {
    initCards()
    var dealerSequence = getTwoCards()
    var playerSequence = getTwoCards()
    var playerEndSequence = generateFrom(playerSequence, softThresholdStrategy(threshold))
    var dealerEndSequence = generateFrom(dealerSequence, hardSeventeenStrategy)

    var winGame = win(playerEndSequence, dealerEndSequence)
    winGame
  }
}
print(Infer({method: 'forward', samples: 100000}, model(12)))
print(Infer({method: 'forward', samples: 100000}, model(13)))
print(Infer({method: 'forward', samples: 100000}, model(14)))
print(Infer({method: 'forward', samples: 100000}, model(15)))
print(Infer({method: 'forward', samples: 100000}, model(16)))
print(Infer({method: 'forward', samples: 100000}, model(17)))
print(Infer({method: 'forward', samples: 100000}, model(18)))
print(Infer({method: 'forward', samples: 100000}, model(19)))
print(Infer({method: 'forward', samples: 100000}, model(20)))
print(Infer({method: 'forward', samples: 100000}, model(21)))

// probability of winning given different soft thresholds (soft 17 dealer)
var model = function(threshold) {
  return function() {
    initCards()
    var dealerSequence = getTwoCards()
    var playerSequence = getTwoCards()
    var playerEndSequence = generateFrom(playerSequence, softThresholdStrategy(threshold))
    var dealerEndSequence = generateFrom(dealerSequence, softSeventeenStrategy)

    var winGame = win(playerEndSequence, dealerEndSequence)
    winGame
  }
}
print(Infer({method: 'forward', samples: 100000}, model(12)))
print(Infer({method: 'forward', samples: 100000}, model(13)))
print(Infer({method: 'forward', samples: 100000}, model(14)))
print(Infer({method: 'forward', samples: 100000}, model(15)))
print(Infer({method: 'forward', samples: 100000}, model(16)))
print(Infer({method: 'forward', samples: 100000}, model(17)))
print(Infer({method: 'forward', samples: 100000}, model(18)))
print(Infer({method: 'forward', samples: 100000}, model(19)))
print(Infer({method: 'forward', samples: 100000}, model(20)))
print(Infer({method: 'forward', samples: 100000}, model(21)))